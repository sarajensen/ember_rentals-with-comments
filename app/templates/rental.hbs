<!-- Route.js's model hook retrieves individiual rental objects from the database based on the url input which translates to the rental id. This way, you can call the object property on model directly. I guess it's not rental.owner (like we're used to). Even though model is a function, its return is an object, so you can treat model like an object in this setting. -->
<h2>More information about {{model.owner}}'s {{model.type}}</h2>
<!-- update-rental refers to the nested component, rental=model sends data down into the component, and update="update" refers to the update action we're trying to send up to index.js.  -->
<!-- update="update" comes from a sendAction from update-rental. -->
{{update-rental rental=model update="update"}}

<!-- This here rental.hbs route is rendering the rental-detail component and sending rental data to the component. For consistency, the rental-detail data will be called rental, even though it's gathered from model. -->
<!-- destroyRental="destroyRental" comes from sendAction("detroyRental", rental) in rental-details.js. Sent actions from components are referenced in the templates they are rendered in, and then the corresponding route handler (index.js) must code the action that is indicated in the component for the action to execute.  -->
{{rental-detail rental=model destroyRental="destroyRental"}}

<!-- New review component will show an Add Review button by default, and a form if that button is clicked. Save button in the form triggers action saveReview, which saves input, that then gets sent to index.js in its very own "saveReview" action. We're reviewing individual rentals, as rentals and reviews have a one-to-many relationship. So the review needs some rental data! passing rental data into the component allows us to save a rental as a property of review (e.g. rental: this.get('rental')) -->
{{new-review saveReview="saveReview" rental=model}}
